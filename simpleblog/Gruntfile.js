module.exports = function (grunt) {
    'use strict';

    grunt.file.defaultEncoding = 'utf8';

    // Force unix line endings
    grunt.util.linefeed = '\n';

    // Project configuration.
    grunt.initConfig({
        pkg: grunt.file.readJSON('package.json'),
        config: grunt.file.readJSON('Content/styles/config/csscomb.json'),

        // Hack to remove all banners and comments from CSS
        concat: {
            options: {
                stripBanners: true
            },
            frontend: {
                src: ['Content/Styles/dist/frontend.css'],
                dest: 'Content/Styles/dist/frontend.css'
            },
            backend: {
                src: ['Content/Styles/dist/backend.css'],
                dest: 'Content/Styles/dist/backend.css'
            }
        },
        
        // Add New banner to head of CSS files
        usebanner: {
            css: {
                options: {
                    position: 'top',
                    banner: '/* \n' +
                    ' * <%= pkg.cssInfo.title %> v<%= pkg.cssInfo.version %> * \n' +
                    ' * <%= pkg.cssInfo.coreTeam %> * \n' +
                    ' *****  WARNING WARNING WARNING  ***** \n' +
                    ' * DO NOT EDIT THIS FILE * \n' +
                    ' * THIS IS AN AUTO GENERATED FILE * \n' +
                    ' * ALL CHANGES WILL BE ERASED * \n' +
                    ' * PLEASE MAKE EDITS IN -- CONTENT/STYLES/SASS/** -- * \n' +
                    ' * Changed: <%= grunt.template.today("mm-dd-yyyy") %> * \n' +
                    '*/ \n',
                    linebreak: true
                },
                files: {
                    src: ['Content/Styles/dist/*.css' ]
                }
            },
            report: {
                options: {
                    position: 'top',
                    banner: "\n<%= pkg.cssInfo.title %> \n" +
                        "Task Completed On: <%= grunt.template.date(\"mm-dd-yyyy\") %> \n" +
                        "Task Version Tested: v<%= pkg.cssInfo.version %> \n" +
                        "Browsers Supported: <%= pkg.config.autoprefixerBrowsers %> \n" +
                        "\n *** AUTO GENERATED FILE ***",
                    linebreak: true
                },
                files: {
                    src: ['Content/CSS-Lint-Report/csslint<%= grunt.template.date(\"mm-dd-yyyy\") %>.txt']
                }
            }
        },

        // Task configuration.
        clean: {
            dist: 'Content/Styles/dist/**'
        },

        // Sass compiler and distribution task
        compass: {
            sasssource: {
                options: {
                    noLineComments: true,
                    sourcemap: true,
                    specify: ['Content/Styles/sass/frontend.scss',
                              'Content/Styles/sass/backend.scss'],
                    sassDir: 'Content/Styles/sass',
                    cssDir: 'Content/Styles/dist',
                    imagesDir: 'Content/Images',
                    fontsDir: 'Content/Fonts',
                    relativeAssets: true,
                    boring: true,
                    debugInfo: false,
                    outputStyle: 'expanded',
                    raw: "preferred_syntax = :scss\n"
                }
            }
        },

        // Prefix CSS to work prefix browsers
        autoprefixer: {
            options: {
                browsers: '<%= pkg.config.autoprefixerBrowsers %>',
                map: false
            },
            frontend: {
                src: 'Content/Styles/dist/frontend.css'
            },
            backend: {
                src: 'Content/Styles/dist/backend.css'
            }
        },

        // Check CSS for not conforming to code conventions
        csslint: {
            options: {
                csslintrc: 'Content/Styles/config/csslintrc.json',
                formatters: [
                  {
                      id: 'text', dest: 'Content/CSS-Lint-Report/csslint.txt'
                  }
                ]
            },
            dist: [
              'Content/Styles/dist/frontend.css',
              'Content/Styles/dist/backend.css'
            ]
        },

        // Reformat CSS to code conventions listed in ~/Content/Styles/config
        csscomb: {
            options: {
                config: 'Content/Styles/config/csscomb.json'
            },
            dist: {
                expand: true,
                cwd: 'Content/Styles/dist/',
                src: ['*.css', '!*.min.css', '!*.css.map'],
                dest: 'Content/Styles/dist/'
            },
            sass: {
                expand: true,
                cwd: 'Content/Styles/sass/',
                src: ['*.scss', '**/**.scss'],
                dest: 'Content/Styles/sass/'
            }
        },

        // Watch for change on Scss files and run task
        watch: {
            test: {
                files: ['Content/Styles/sass/*scss', 'Content/Styles/sass/**/*scss'],
                tasks: ['compass', 'autoprefixer', 'csscomb', 'concat', 'lint', 'usebanner']
            }
        }
    });

    // Load all grunt plugins listed in ~/package.json
    require('load-grunt-tasks')(grunt, { scope: 'devDependencies' });

    // CSS Lint
    grunt.registerTask('lint', ['csslint']);

    // CSS Comb
    grunt.registerTask('comb', ['csscomb']);

    // Default Task
    grunt.registerTask('default', ['clean', 'compass', 'autoprefixer', 'csscomb', 'lint', 'usebanner']);

    // Full Distribution Task.
    grunt.registerTask('dist', ['clean', 'compass', 'autoprefixer', 'csscomb', 'lint', 'usebanner']);

};
