module.exports = function (grunt) {
    'use strict';

    grunt.file.defaultEncoding = 'utf8';
    grunt.util.linefeed = '\n';

    // Project configuration.
    grunt.initConfig({
        pkg: grunt.file.readJSON('package.json'),
        config: grunt.file.readJSON('config/.csscomb.json'),

        banner: '/*! \n' +
                ' * <%= pkg.title %>  v<%= pkg.version %> \n' +
                ' * Changed: <%= grunt.template.today("yyyy-mm-dd") %> \n' +
                ' * DO NOT EDIT THIS FILE \n' +
                ' * AUTO GENERATED FILE \n' +
                ' * ALL CHANGES WILL BE ERASED \n' +
                '*/ \n',
        cssBanner: '<%= banner %>',

        // Task configuration.
        clean: {
            dist: 'Content/Styles/dist/**'
        },

        compass: {
            sasssource: {
                options: {
                    noLineComments: true,
                    sourcemap: true,
                    specify: ['Content/Styles/sass/frontend.scss',
                              'Content/Styles/sass/backend.scss'],
                    sassDir: 'Content/Styles/sass',
                    cssDir: 'Content/Styles/sass',
                    imagesDir: 'Content/Images',
                    fontsDir: 'Content/Fonts',
                    relativeAssets: true,
                    boring: true,
                    debugInfo: false,
                    outputStyle: 'expanded',
                    raw: "preferred_syntax = :scss\n"
                }
            }
        },

        autoprefixer: {
            options: {
                browsers: '<%= pkg.config.autoprefixerBrowsers %>',
                map: false
            },
            frontend: {
                src: 'Content/Styles/dist/frontend.css'
            },
            backend: {
                src: 'Content/Styles/dist/backend.css'
            }
        },

        csslint: {
            options: {
                csslintrc: 'Content/Styles/config/csslintrc.json',
                formatters: [
                  {
                      id: 'text', dest: 'report/csslint.txt'
                  }
                ]
            },
            dist: [
              'Content/Styles/dist/frontend.css',
              'Content/Styles/dist/backend.css'
            ]
        },

        csscomb: {
            options: {
                config: 'Content/Styles/config/csscomb.json'
            },
            dist: {
                expand: true,
                cwd: 'Content/Styles/dist/',
                src: ['*.css', '!*.min.css', '!*.css.map'],
                dest: 'Content/Styles/dist/'
            }
        },

        watch: {
            test: {
                files: ['Content/Styles/sass/*scss', 'Content/Styles/sass/**/*scss'],
                tasks: ['compass', 'autoprefixer', 'csscomb']
            }
        }
    });

    // Load plugins
    require('load-grunt-tasks')(grunt, { scope: 'devDependencies' });

    // Dist CSS
    grunt.registerTask('dist-css', ['concat:saltyCSS', 'autoprefixer', 'csscomb', 'cssmin:core', 'cssmin:site']);

    // CSS Lint All
    grunt.registerTask('lint', ['csscomb', 'csslint:docs', 'csslint:predist']);

    // CSS Comb
    grunt.registerTask('comb', ['csscomb']);

    // Default Task.
    grunt.registerTask('default', ['clean:dist', 'copy', 'dist-css', 'dist-js']);

    // Full Distribution Task.
    grunt.registerTask('dist', ['clean:dist', 'copy', 'dist-css', 'dist-js', 'ftpall']);

};
